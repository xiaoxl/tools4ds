{
  "hash": "6ee82e66a67aadf9350334174d434107",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat:\n   html:\n     code-line-numbers: false\n     code-block-border-left: false \n---\n\n# Regular expression {#sec-re}\n\n*Regular expressions* provide a flexible way to search or match string patterns in text. A single expression, commonly called a *regex*, is a string formed according to the regular expression language. Pythonâ€™s built-in `re` module is responsible for applying regular expressions to strings.\n\nFor details of the regular expression language in Python, please read the official documents from [here](https://docs.python.org/3/library/re.html). There are also many great websites for learning regex. [This](https://regex101.com/) is one example.\n\nWe will briefly mentioned a few rules here.\n\n\n- `.`: matches any character except a newline. \n- `\\d`: matches any digit. It is the same as `[0-9]`.\n- `\\D`: matches any characters that are NOT `\\d`. It is the same as `[^0-9]`.\n- `\\w`: matches any alphabatic or numeric character. It is the same as `[a-zA-Z0-9_]`.\n- `\\W`: matches any characters that are NOT `\\w`.\n- `\\s`: matches any whitespaces. It is the same as `[\\t\\n\\r\\f\\v]`.\n- `\\S`: mathces any characters that are not `\\s`.\n- `\\A`: matches the start of the string.\n- `\\Z`: matches the end of the string.\n\n- `*`: Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. \n- `+`: Causes the resulting RE to match 1 or more repetitions of the preceding RE, as many repetitions as are possible.\n- `?`: Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. \n- `*?`, `+?`, `??`: The `*`, `+`, and `?` qualifiers are all greedy; they match as much text as possible. Adding `?` after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched.\n- `{m}`: Specifies that exactly m copies of the previous RE should be matched.\n- `{m,n}`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as many repetitions as possible. \n- `{m,n}?`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as few repetitions as possible. \n- `[]`: Used to indicate a set of characters.\n- `()`: set groups.\n\n\n\n::: {.callout-note}\nTo search multiple characters simutanously, you may use `[]`. For example, `[abc]` means either `a` or `b` or `c`. However, `[]` doesn't recognize special characters, so `[\\s|\\w]` means either `\\` or `s` or `\\` or `w`, instead of the pattern `\\s` or `\\w`.\n\nTo search such a pattern, you may use `(|)`. For example, `(\\s|\\w)` means either `\\s` or `\\w` satisfies the pattern.\n:::\n\n::: {#exm-p1}\n\n::: {#62546722 .cell execution_count=1}\n``` {.python .cell-code}\nimport re\ntext = \"foo bar\\t baz \\tqux\"\npattern = '\\s+'\nregex = re.compile(pattern)\nregex.split(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n['foo', 'bar', 'baz', 'qux']\n```\n:::\n:::\n\n\n:::\n\n- `.match()`\n- `.search()`\n- `.findall()`\n- `.split()`\n- `.sub()`\n\nWe can use `()` to specify groups, and use `.groups()` to get access to the results.\n\n\n::: {#exm-p2}\n\n::: {#814d4168 .cell execution_count=2}\n``` {.python .cell-code}\nimport re\npattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})'\nregex = re.compile(pattern, flags=re.IGNORECASE)\nm = regex.match('wesm@bright.net')\nm.groups()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n('wesm', 'bright', 'net')\n```\n:::\n:::\n\n\n:::\n\nTo use regex to DataFrame and Series, you may directly apply `.match`, `.findall`, `.replace` after `.str`, with the regex pattern as one of the arguments.\n\n`.extract` is a method that is not from `re`. It is used to extract the matched groups and make them as a DataFrame. \n\n::: {#exm-p3}\n\n::: {#fd2c3da4 .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nmnames = ['movie_id', 'title', 'genres']\nmovies = pd.read_table('../assests/datasets/movies.dat', sep='::',\n                       header=None, names=mnames, engine=\"python\",\n                       encoding='ISO-8859-1')\n\npattern = r'([a-zA-Z0-9_\\s,.?:;\\']+)\\((\\d{4})\\)'\nmovies = movies.join(movies.title.str.extract(pattern).rename(columns={0: 'movie title', 1: 'year'}))\n```\n:::\n\n\n:::\n\n\n\n<!-- ```{python}\n#| eval: false\n#| echo: false\nfrom functools import reduce\ngenresdummylist = df['genres'].str.extractall(r\"'(\\w+)'\").unstack()\ndummylist = list()\nfor i in genresdummylist.columns:\n    dummylist.append(pd.get_dummies(genresdummylist[i]))\n\ndummy = reduce(lambda x, y: x.add(y, fill_value=0), dummylist).astype(int)\ndf = pd.merge(df, dummy, left_index=True, right_index=True)\n\n``` -->\n\n\n\n\n\n\n::: {#exr-pp5}\n# Regular expressions\nPlease use regular expressions to finish the following tasks.\n\n1. Match a string that has an `a` followed by zero or more `b`'s.\n2. Match a string that has an `a` followed by one or more `b`'s.\n3. Match a string that has an `a` followed by zero or one `b`.\n4. Match a string that has an `a` followed by three `b`'s.\n:::\n\n\n\n::: {#exr-m1}\n# More regex\nFind all words starting with `a` or `e` in a given string:\n\n::: {#9cfa02b9 .cell execution_count=4}\n``` {.python .cell-code}\ntext = \"The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\n```\n:::\n\n\n:::\n\n\n::: {#exr-m2}\n# More regex\nWrite a Python code to extract year, month and date from a `url1`: \n\n::: {#ed9301d6 .cell execution_count=5}\n``` {.python .cell-code}\nurl1= \"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"\n```\n:::\n\n\n:::\n\n\n\n\n::: {#exr-m3}\n# More regex\nPlease use regex to parse the following str to create a dictionary.\n\n::: {#0af455e8 .cell execution_count=6}\n``` {.python .cell-code}\ntext = r'''\n{\n    name: Firstname Lastname;\n    age: 100;\n    salary: 10000 \n}\n'''\n```\n:::\n\n\n:::\n\n\n\n::: {#exr-pp1}\n\nConsider the following DataFrame.\n\n::: {#530e30c1 .cell execution_count=7}\n``` {.python .cell-code}\ndata = [['Evert van Dijk', 'Carmine-pink, salmon-pink streaks, stripes, flecks.  Warm pink, clear carmine pink, rose pink shaded salmon.  Mild fragrance.  Large, very double, in small clusters, high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Every Good Gift', 'Red.  Flowers velvety red.  Moderate fragrance.  Average diameter 4\".  Medium-large, full (26-40 petals), borne mostly solitary bloom form.  Blooms in flushes throughout the season.'], \n        ['Evghenya', 'Orange-pink.  75 petals.  Large, very double bloom form.  Blooms in flushes throughout the season.'], \n        ['Evita', 'White or white blend.  None to mild fragrance.  35 petals.  Large, full (26-40 petals), high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Evrathin', 'Light pink. [Deep pink.]  Outer petals white. Expand rarely.  Mild fragrance.  35 to 40 petals.  Average diameter 2.5\".  Medium, double (17-25 petals), full (26-40 petals), cluster-flowered, in small clusters bloom form.  Prolific, once-blooming spring or summer.  Glandular sepals, leafy sepals, long sepals buds.'],\n        ['Evita 2', 'White, blush shading.  Mild, wild rose fragrance.  20 to 25 petals.  Average diameter 1.25\".  Small, very double, cluster-flowered bloom form.  Blooms in flushes throughout the season.']]\n  \ndf = pd.DataFrame(data, columns = ['NAME', 'BLOOM']) \ndf \n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NAME</th>\n      <th>BLOOM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Evert van Dijk</td>\n      <td>Carmine-pink, salmon-pink streaks, stripes, fl...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Every Good Gift</td>\n      <td>Red.  Flowers velvety red.  Moderate fragrance...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Evghenya</td>\n      <td>Orange-pink.  75 petals.  Large, very double b...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Evita</td>\n      <td>White or white blend.  None to mild fragrance....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Evrathin</td>\n      <td>Light pink. [Deep pink.]  Outer petals white. ...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Evita 2</td>\n      <td>White, blush shading.  Mild, wild rose fragran...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlease use regex methods to find all the `()` in each columns.\n\n:::\n\n\n::: {#exr-pp2}\n\nFrom `ser = pd.Series(['Apple', 'Orange', 'Plan', 'Python', 'Money'])`, find the words that contain at least 2 vowels.\n:::\n\n\n\n::: {#exr-pp3}\n\nPlease download the [given file](assests/datasets/test_emails.txt) with sample emails, and use the following code to load the file and save it to a string `content`.\n\n::: {#8396341c .cell execution_count=8}\n``` {.python .cell-code}\nwith open('../assests/datasets/test_emails.txt', 'r') as f:\n    content = f.read()\n```\n:::\n\n\nPlease use regex to play with `content`.\n\n1. Get all valid email address in `content`, from both the header part or the body part.\n2. There are two emails in `content`. Please get the sender's email and the receiver's email from `content`.\n3. Please get the sender's name.\n4. Please get the subject of each email.\n:::\n\n\n\n\n\n\n::: {#exr-pp4}\n\nExtract the valid emails from the series `emails`. The regex `pattern` for valid emails is provided as reference.\n\n::: {#5a674ebb .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\nemails = pd.Series(['buying books at amazom.com',\n                    'rameses@egypt.com',\n                    'matt@t.co',\n                    'narendra@modi.com'])\npattern = '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}'\n```\n:::\n\n\n:::\n\n",
    "supporting": [
      "re_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}