{"title":"Some Hard Python concepts","markdown":{"yaml":{"format":{"html":{"code-line-numbers":false}}},"headingText":"Some Hard Python concepts","containsRefs":false,"markdown":"\n\n\n\n## Language\n\nPython is a programming language. In other words, it is a collection of syntaxes.\n\n## Interpreters\n\nPython needs to be interpreted into codes that computers can understand. Therefore there should be some programs that translate Python scripts. These programs are called *interpreters*.\n\n`CPython` is the refernce interpreter of Python programming language, and it is the most widely used ones for Python. It is written in C and Python. When Python programming language introduces new features, they are developed based on `CPython`, and are first implemented in `CPython`. Sometimes an interpreter is also called an *implementation*.\n\nThere are alternatives to `CPython`, like [`PyPy`](https://www.pypy.org/), [`Jython`](https://www.jython.org/), [`IronPython`](https://ironpython.net/), etc.. In theory, any Python scripts should be able to run on any of these implementations, and the result should be the same. The differences mainly come from perfamance and compatiblity with non-Python packages. For example, `CPython` is executed by a C interpreter. Therefore it is very easy to write C-extensions for your Python code. `Jython`, since it is implemented in Java, makes it very easy to work with other Java programs that you can import any Java classes with no additional effort.\n\nSince `CPython` is most-widely used and tested, it is the best choice, at least for beginners. And actually, if you have no idea about this topic, but you use Python, it is highly possible that you are using `CPython`.\n\n\n::: {.callout-note collapse=\"true\"}\nWe mentioned \"interpreter\" here. There are mainly two types of implimentations of programming langauges: interpreters and compilers. There are also some additional types like just-in-time compilers which can be treated as combinations of the two. \n\nPython is usually treated as an *interpreted* language since `CPython` is an interpreter. One of Python's most useful features is its interactive interpreter, which allows for very fast testing of ideas without the overhead of creating test files as is typical in most programming languages.\n:::\n\n\n## REPL \nThere are two ways to use Python interpreter. The default way is that Python interpreter reads a file and execute a script from there. The second way is called *the intereactive shell*, that Python interpreter read the input from user directly, and print the result immediately. The model is like code example: prompt the user for some code, and when theyâ€™ve entered it, execute it in the same process. This model is often called a [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop), or *Read-Eval-Print-Loop*.\n\n\n\n*Shell*, *terminal*, *console* have different meanings in their original contexts. However, nowadays, especially when talking about Python intereactive shell, these terminologies are used interchangeably. They are referred to the frontend of the system. In other words, the main task for the Python intereactive shell is to handle the user inputs and communicate with the backend, which is also called a *kernel*. We won't distinguish the real differences between these terminologies. The kernel will be discussed in the next section.\n\n\nThe standard interactive Python interpreter can be invoked on the command line with the `python` command. Note that you should make sure that the `PATH` system enviroment variable is configured, otherwise you have to specifiy the path to the Python execuatable file. To quit the intereactive shell you can type the commands `quit()`/`exit()`/`Ctrl+Z` then `Enter`.\n\n\n::: {.callout-note}\nIn the REPL model, the backend (evaluation) is basically handled by the Python interpreter. The frontend is dealing with the user interface. Some typically tasks include the *primary/secondary prompt* and multi-line commands. The original REPL is very limited.\n:::\n\n## `IPython`\n`IPython` was initially designed as an Enhanced interactive Python shell. However after many year's development, the whole `IPython` project becomes too big to maintain as one single project. Therefore it is now split into many smaller projects. The two most popular projects are `IPython` and `Jupyter`. This is called [the Big Split](https://blog.jupyter.org/the-big-split-9d7b88a031a7).\n\nThe current [`IPython`](https://ipython.readthedocs.io/en/stable/overview.html) play two fundamental roles:\n\n- Terminal `IPython` as the familiar REPL;\n- The `IPython` kernel (which is defined below) that provides computation and communication with the frontend interfaces, like the notebook.\n\nThe core idea in the design of `IPython` is to abstract and extend the notion of a traditional REPL environment by decoupling the evaluation into its own process. We call this process a *kernel*: it receives execution instructions from clients and communicates the results back to them.\n\nThis decoupling allows us to have several clients connected to the same kernel, and even allows clients and kernels to live on different machines. This two-process model is now used by most of the `Jupyter` project.\n\nYou can launch the `IPython` shell on the command line with the `ipython` command (which similar to `python` case requires `PATH` configuration), and quit the shell with `exit`/`exit()`/`quit`/`quit()` commands.\n\nThe reference Python kernel provided by `IPython` is called `ipykernel`. With `ipykernel` you may create and maintain multiple kernels. \n\n\n## `Jupyter`\n[`Jupyter`](https://docs.jupyter.org/en/latest/projects/architecture/content-architecture.html) projects contain many subprojects, which includes `Jupyter` User Interfaces. The `Jupyter` user interfaces offer a foundation of interactive computing environments where scientific computing, data science, and analytics can be performed using a wide range of programming languages. This includes `Jupyter console`, `Jupyter qtconsole`, and `Jupyter notebook`. Here we mainly focus on `Jupyter notebook`.\n\n\n`Jupyter notebooks` are structured data that represent your code, metadata, content, and outputs. When saved to disk, the notebook uses the extension `.ipynb`, and uses a `JSON` structure. After receiving the user input, the notebook communicates with the kernel using `JSON` messages sent over `ZeroMQ` sockets. The protocol used between the frontends and the kernel is described in [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messaging).\n\nA kernel process can be connected to more than one frontend simultaneously. In this case, the different frontends will have access to the same variables.\n\nThis design was intended to allow easy development of different frontends based on the same kernel, but it also made it possible to support new languages in the same frontends, by developing kernels in those languages. The `Jupyter` Notebook Application has three main kernels: the `ipykernel`, `irkernel` and `ijulia` kernels. Actually the name of `Jupyter` comes from these three programming languages for data science: [Julia](https://julialang.org/), Python and R.\n\n\n\n\n## Multi-kernels setup\nThis section is mainly following the [official document](https://ipython.readthedocs.io/en/stable/install/kernel_install.html).\n\nTo install one `IPython` kernel, you may use `conda` or `pip` to install `ipykernel` in the environment. If you want to have multiple `IPython` kernels for different virtualenvs or `conda` environments, you will need to specify unique names for the kernelspecs.\n\n1. Activate the environment you want.\n\n```{.bash}\nconda activate myenv\n```\n\n2. Install the kernel in the environment.\n\n```{.bash}\nconda install jupyter\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n```\n`--user` means that the kernel is installed in the user's folder instead of a system folder, and it can be removed. The `--name` value (in this case it is `myenv`) is used by Jupyter internally. These commands will overwrite any existing kernel with the same name. `--display-name` is what you see in the notebook menus.\n\n\n3. You could use the command to find all kernels installed in your system.\n\n\n```{.bash}\njupyter kernelspec list\n```\nAvailable kernels are shown, as well as the path to the kernel configuration file `kernel.json`. The most important configuration is the path to the Python interpreter executatable file.\n\n\n```{.json filename=\"kernel.json\"}\n{\n \"argv\": [\n  \"C:\\\\Users\\\\Xinli\\\\anaconda3\\\\envs\\\\myenv\\\\python.exe\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python (3.10)\",\n \"language\": \"python\",\n \"metadata\": {\n  \"debugger\": true\n }\n}\n```\n\n4. There is a possibility that `Jupyter` cannot find the kernel you create in a `conda` environment. In this case you may want to try [`nb_conda_kernels`](https://github.com/Anaconda-Platform/nb_conda_kernels/). This is a tool to enable a Jupyter notebook in one `conda` environment to access kernels found in other environments. It should be installed in the environment from which you run `Jupyter` Notebook or `JupyterLab`. This might be your base `conda` environment, but it need not be. After you finish installation, you may use `jupyter kernelspec list` to check whether it works.\n\n","srcMarkdownNoYaml":"\n\n\n# Some Hard Python concepts\n\n## Language\n\nPython is a programming language. In other words, it is a collection of syntaxes.\n\n## Interpreters\n\nPython needs to be interpreted into codes that computers can understand. Therefore there should be some programs that translate Python scripts. These programs are called *interpreters*.\n\n`CPython` is the refernce interpreter of Python programming language, and it is the most widely used ones for Python. It is written in C and Python. When Python programming language introduces new features, they are developed based on `CPython`, and are first implemented in `CPython`. Sometimes an interpreter is also called an *implementation*.\n\nThere are alternatives to `CPython`, like [`PyPy`](https://www.pypy.org/), [`Jython`](https://www.jython.org/), [`IronPython`](https://ironpython.net/), etc.. In theory, any Python scripts should be able to run on any of these implementations, and the result should be the same. The differences mainly come from perfamance and compatiblity with non-Python packages. For example, `CPython` is executed by a C interpreter. Therefore it is very easy to write C-extensions for your Python code. `Jython`, since it is implemented in Java, makes it very easy to work with other Java programs that you can import any Java classes with no additional effort.\n\nSince `CPython` is most-widely used and tested, it is the best choice, at least for beginners. And actually, if you have no idea about this topic, but you use Python, it is highly possible that you are using `CPython`.\n\n\n::: {.callout-note collapse=\"true\"}\nWe mentioned \"interpreter\" here. There are mainly two types of implimentations of programming langauges: interpreters and compilers. There are also some additional types like just-in-time compilers which can be treated as combinations of the two. \n\nPython is usually treated as an *interpreted* language since `CPython` is an interpreter. One of Python's most useful features is its interactive interpreter, which allows for very fast testing of ideas without the overhead of creating test files as is typical in most programming languages.\n:::\n\n\n## REPL \nThere are two ways to use Python interpreter. The default way is that Python interpreter reads a file and execute a script from there. The second way is called *the intereactive shell*, that Python interpreter read the input from user directly, and print the result immediately. The model is like code example: prompt the user for some code, and when theyâ€™ve entered it, execute it in the same process. This model is often called a [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop), or *Read-Eval-Print-Loop*.\n\n\n\n*Shell*, *terminal*, *console* have different meanings in their original contexts. However, nowadays, especially when talking about Python intereactive shell, these terminologies are used interchangeably. They are referred to the frontend of the system. In other words, the main task for the Python intereactive shell is to handle the user inputs and communicate with the backend, which is also called a *kernel*. We won't distinguish the real differences between these terminologies. The kernel will be discussed in the next section.\n\n\nThe standard interactive Python interpreter can be invoked on the command line with the `python` command. Note that you should make sure that the `PATH` system enviroment variable is configured, otherwise you have to specifiy the path to the Python execuatable file. To quit the intereactive shell you can type the commands `quit()`/`exit()`/`Ctrl+Z` then `Enter`.\n\n\n::: {.callout-note}\nIn the REPL model, the backend (evaluation) is basically handled by the Python interpreter. The frontend is dealing with the user interface. Some typically tasks include the *primary/secondary prompt* and multi-line commands. The original REPL is very limited.\n:::\n\n## `IPython`\n`IPython` was initially designed as an Enhanced interactive Python shell. However after many year's development, the whole `IPython` project becomes too big to maintain as one single project. Therefore it is now split into many smaller projects. The two most popular projects are `IPython` and `Jupyter`. This is called [the Big Split](https://blog.jupyter.org/the-big-split-9d7b88a031a7).\n\nThe current [`IPython`](https://ipython.readthedocs.io/en/stable/overview.html) play two fundamental roles:\n\n- Terminal `IPython` as the familiar REPL;\n- The `IPython` kernel (which is defined below) that provides computation and communication with the frontend interfaces, like the notebook.\n\nThe core idea in the design of `IPython` is to abstract and extend the notion of a traditional REPL environment by decoupling the evaluation into its own process. We call this process a *kernel*: it receives execution instructions from clients and communicates the results back to them.\n\nThis decoupling allows us to have several clients connected to the same kernel, and even allows clients and kernels to live on different machines. This two-process model is now used by most of the `Jupyter` project.\n\nYou can launch the `IPython` shell on the command line with the `ipython` command (which similar to `python` case requires `PATH` configuration), and quit the shell with `exit`/`exit()`/`quit`/`quit()` commands.\n\nThe reference Python kernel provided by `IPython` is called `ipykernel`. With `ipykernel` you may create and maintain multiple kernels. \n\n\n## `Jupyter`\n[`Jupyter`](https://docs.jupyter.org/en/latest/projects/architecture/content-architecture.html) projects contain many subprojects, which includes `Jupyter` User Interfaces. The `Jupyter` user interfaces offer a foundation of interactive computing environments where scientific computing, data science, and analytics can be performed using a wide range of programming languages. This includes `Jupyter console`, `Jupyter qtconsole`, and `Jupyter notebook`. Here we mainly focus on `Jupyter notebook`.\n\n\n`Jupyter notebooks` are structured data that represent your code, metadata, content, and outputs. When saved to disk, the notebook uses the extension `.ipynb`, and uses a `JSON` structure. After receiving the user input, the notebook communicates with the kernel using `JSON` messages sent over `ZeroMQ` sockets. The protocol used between the frontends and the kernel is described in [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messaging).\n\nA kernel process can be connected to more than one frontend simultaneously. In this case, the different frontends will have access to the same variables.\n\nThis design was intended to allow easy development of different frontends based on the same kernel, but it also made it possible to support new languages in the same frontends, by developing kernels in those languages. The `Jupyter` Notebook Application has three main kernels: the `ipykernel`, `irkernel` and `ijulia` kernels. Actually the name of `Jupyter` comes from these three programming languages for data science: [Julia](https://julialang.org/), Python and R.\n\n\n\n\n## Multi-kernels setup\nThis section is mainly following the [official document](https://ipython.readthedocs.io/en/stable/install/kernel_install.html).\n\nTo install one `IPython` kernel, you may use `conda` or `pip` to install `ipykernel` in the environment. If you want to have multiple `IPython` kernels for different virtualenvs or `conda` environments, you will need to specify unique names for the kernelspecs.\n\n1. Activate the environment you want.\n\n```{.bash}\nconda activate myenv\n```\n\n2. Install the kernel in the environment.\n\n```{.bash}\nconda install jupyter\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n```\n`--user` means that the kernel is installed in the user's folder instead of a system folder, and it can be removed. The `--name` value (in this case it is `myenv`) is used by Jupyter internally. These commands will overwrite any existing kernel with the same name. `--display-name` is what you see in the notebook menus.\n\n\n3. You could use the command to find all kernels installed in your system.\n\n\n```{.bash}\njupyter kernelspec list\n```\nAvailable kernels are shown, as well as the path to the kernel configuration file `kernel.json`. The most important configuration is the path to the Python interpreter executatable file.\n\n\n```{.json filename=\"kernel.json\"}\n{\n \"argv\": [\n  \"C:\\\\Users\\\\Xinli\\\\anaconda3\\\\envs\\\\myenv\\\\python.exe\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python (3.10)\",\n \"language\": \"python\",\n \"metadata\": {\n  \"debugger\": true\n }\n}\n```\n\n4. There is a possibility that `Jupyter` cannot find the kernel you create in a `conda` environment. In this case you may want to try [`nb_conda_kernels`](https://github.com/Anaconda-Platform/nb_conda_kernels/). This is a tool to enable a Jupyter notebook in one `conda` environment to access kernels found in other environments. It should be installed in the environment from which you run `Jupyter` Notebook or `JupyterLab`. This might be your base `conda` environment, but it need not be. After you finish installation, you may use `jupyter kernelspec list` to check whether it works.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"top-level-division":"part","toc-depth":3,"highlight-style":"atom-one","output-file":"concepts.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.530","number-depth":4,"bibliography":["../../book.bib"],"csl":"../../ims.csl","crossref":{"labels":"arabic","subref-labels":"roman i"},"knitr":{"opts_chunk":{"comment":"#>","collapse":true}},"jupyter":"ds24","theme":"lumen","code-block-bg":true,"code-block-border-left":true,"page-layout":"article"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}