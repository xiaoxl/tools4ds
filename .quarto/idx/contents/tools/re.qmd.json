{"title":"Regular expression","markdown":{"yaml":{"format":{"html":{"code-line-numbers":false,"code-block-border-left":false}}},"headingText":"Regular expression","headingAttr":{"id":"sec-re","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n*Regular expressions* provide a flexible way to search or match string patterns in text. A single expression, commonly called a *regex*, is a string formed according to the regular expression language. Python’s built-in `re` module is responsible for applying regular expressions to strings.\n\nFor details of the regular expression language in Python, please read the official documents from [here](https://docs.python.org/3/library/re.html). There are also many great websites for learning regex. [This](https://regex101.com/) is one example.\n\nWe will briefly mentioned a few rules here.\n\n\n- `.`: matches any character except a newline. \n- `\\d`: matches any digit. It is the same as `[0-9]`.\n- `\\D`: matches any characters that are NOT `\\d`. It is the same as `[^0-9]`.\n- `\\w`: matches any alphabatic or numeric character. It is the same as `[a-zA-Z0-9_]`.\n- `\\W`: matches any characters that are NOT `\\w`.\n- `\\s`: matches any whitespaces. It is the same as `[\\t\\n\\r\\f\\v]`.\n- `\\S`: mathces any characters that are not `\\s`.\n- `\\A`: matches the start of the string.\n- `\\Z`: matches the end of the string.\n\n- `*`: Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. \n- `+`: Causes the resulting RE to match 1 or more repetitions of the preceding RE, as many repetitions as are possible.\n- `?`: Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. \n- `*?`, `+?`, `??`: The `*`, `+`, and `?` qualifiers are all greedy; they match as much text as possible. Adding `?` after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched.\n- `{m}`: Specifies that exactly m copies of the previous RE should be matched.\n- `{m,n}`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as many repetitions as possible. \n- `{m,n}?`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as few repetitions as possible. \n- `[]`: Used to indicate a set of characters.\n- `()`: set groups.\n\n\n\n::: {.callout-note}\nTo search multiple characters simutanously, you may use `[]`. For example, `[abc]` means either `a` or `b` or `c`. However, `[]` doesn't recognize special characters, so `[\\s|\\w]` means either `\\` or `s` or `\\` or `w`, instead of the pattern `\\s` or `\\w`.\n\nTo search such a pattern, you may use `(|)`. For example, `(\\s|\\w)` means either `\\s` or `\\w` satisfies the pattern.\n:::\n\n::: {#exm-p1}\n\n```{python}\nimport re\ntext = \"foo bar\\t baz \\tqux\"\npattern = '\\s+'\nregex = re.compile(pattern)\nregex.split(text)\n```\n\n:::\n\n- `.match()`\n- `.search()`\n- `.findall()`\n- `.split()`\n- `.sub()`\n\nWe can use `()` to specify groups, and use `.groups()` to get access to the results.\n\n\n::: {#exm-p2}\n\n```{python}\nimport re\npattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})'\nregex = re.compile(pattern, flags=re.IGNORECASE)\nm = regex.match('wesm@bright.net')\nm.groups()\n```\n\n:::\n\nTo use regex to DataFrame and Series, you may directly apply `.match`, `.findall`, `.replace` after `.str`, with the regex pattern as one of the arguments.\n\n`.extract` is a method that is not from `re`. It is used to extract the matched groups and make them as a DataFrame. \n\n::: {#exm-p3}\n```{python}\nimport pandas as pd\nimport numpy as np\nmnames = ['movie_id', 'title', 'genres']\nmovies = pd.read_table('../assests/datasets/movies.dat', sep='::',\n                       header=None, names=mnames, engine=\"python\",\n                       encoding='ISO-8859-1')\n\npattern = r'([a-zA-Z0-9_\\s,.?:;\\']+)\\((\\d{4})\\)'\nmovies = movies.join(movies.title.str.extract(pattern).rename(columns={0: 'movie title', 1: 'year'}))\n```\n:::\n\n\n\n<!-- ```{python}\n#| eval: false\n#| echo: false\nfrom functools import reduce\ngenresdummylist = df['genres'].str.extractall(r\"'(\\w+)'\").unstack()\ndummylist = list()\nfor i in genresdummylist.columns:\n    dummylist.append(pd.get_dummies(genresdummylist[i]))\n\ndummy = reduce(lambda x, y: x.add(y, fill_value=0), dummylist).astype(int)\ndf = pd.merge(df, dummy, left_index=True, right_index=True)\n\n``` -->\n\n\n\n\n\n\n::: {#exr-pp5}\n# Regular expressions\nPlease use regular expressions to finish the following tasks.\n\n1. Match a string that has an `a` followed by zero or more `b`'s.\n2. Match a string that has an `a` followed by one or more `b`'s.\n3. Match a string that has an `a` followed by zero or one `b`.\n4. Match a string that has an `a` followed by three `b`'s.\n:::\n\n\n\n::: {#exr-m1}\n# More regex\nFind all words starting with `a` or `e` in a given string:\n\n```{python}\ntext = \"The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\n```\n\n:::\n\n\n::: {#exr-m2}\n# More regex\nWrite a Python code to extract year, month and date from a `url1`: \n\n```{python}\nurl1= \"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"\n```\n\n:::\n\n\n\n\n::: {#exr-m3}\n# More regex\nPlease use regex to parse the following str to create a dictionary.\n```{python}\ntext = r'''\n{\n    name: Firstname Lastname;\n    age: 100;\n    salary: 10000 \n}\n'''\n```\n\n\n:::\n\n\n\n::: {#exr-pp1}\n\nConsider the following DataFrame.\n\n```{python}\ndata = [['Evert van Dijk', 'Carmine-pink, salmon-pink streaks, stripes, flecks.  Warm pink, clear carmine pink, rose pink shaded salmon.  Mild fragrance.  Large, very double, in small clusters, high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Every Good Gift', 'Red.  Flowers velvety red.  Moderate fragrance.  Average diameter 4\".  Medium-large, full (26-40 petals), borne mostly solitary bloom form.  Blooms in flushes throughout the season.'], \n        ['Evghenya', 'Orange-pink.  75 petals.  Large, very double bloom form.  Blooms in flushes throughout the season.'], \n        ['Evita', 'White or white blend.  None to mild fragrance.  35 petals.  Large, full (26-40 petals), high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Evrathin', 'Light pink. [Deep pink.]  Outer petals white. Expand rarely.  Mild fragrance.  35 to 40 petals.  Average diameter 2.5\".  Medium, double (17-25 petals), full (26-40 petals), cluster-flowered, in small clusters bloom form.  Prolific, once-blooming spring or summer.  Glandular sepals, leafy sepals, long sepals buds.'],\n        ['Evita 2', 'White, blush shading.  Mild, wild rose fragrance.  20 to 25 petals.  Average diameter 1.25\".  Small, very double, cluster-flowered bloom form.  Blooms in flushes throughout the season.']]\n  \ndf = pd.DataFrame(data, columns = ['NAME', 'BLOOM']) \ndf \n```\n\nPlease use regex methods to find all the `()` in each columns.\n\n:::\n\n\n::: {#exr-pp2}\n\nFrom `ser = pd.Series(['Apple', 'Orange', 'Plan', 'Python', 'Money'])`, find the words that contain at least 2 vowels.\n:::\n\n\n\n::: {#exr-pp3}\n\nPlease download the [given file](assests/datasets/test_emails.txt) with sample emails, and use the following code to load the file and save it to a string `content`.\n```{python}\nwith open('../assests/datasets/test_emails.txt', 'r') as f:\n    content = f.read()\n```\nPlease use regex to play with `content`.\n\n1. Get all valid email address in `content`, from both the header part or the body part.\n2. There are two emails in `content`. Please get the sender's email and the receiver's email from `content`.\n3. Please get the sender's name.\n4. Please get the subject of each email.\n:::\n\n\n\n\n\n\n::: {#exr-pp4}\n\nExtract the valid emails from the series `emails`. The regex `pattern` for valid emails is provided as reference.\n\n```{python}\nimport pandas as pd\nemails = pd.Series(['buying books at amazom.com',\n                    'rameses@egypt.com',\n                    'matt@t.co',\n                    'narendra@modi.com'])\npattern = '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}'\n```\n\n:::\n","srcMarkdownNoYaml":"\n\n# Regular expression {#sec-re}\n\n*Regular expressions* provide a flexible way to search or match string patterns in text. A single expression, commonly called a *regex*, is a string formed according to the regular expression language. Python’s built-in `re` module is responsible for applying regular expressions to strings.\n\nFor details of the regular expression language in Python, please read the official documents from [here](https://docs.python.org/3/library/re.html). There are also many great websites for learning regex. [This](https://regex101.com/) is one example.\n\nWe will briefly mentioned a few rules here.\n\n\n- `.`: matches any character except a newline. \n- `\\d`: matches any digit. It is the same as `[0-9]`.\n- `\\D`: matches any characters that are NOT `\\d`. It is the same as `[^0-9]`.\n- `\\w`: matches any alphabatic or numeric character. It is the same as `[a-zA-Z0-9_]`.\n- `\\W`: matches any characters that are NOT `\\w`.\n- `\\s`: matches any whitespaces. It is the same as `[\\t\\n\\r\\f\\v]`.\n- `\\S`: mathces any characters that are not `\\s`.\n- `\\A`: matches the start of the string.\n- `\\Z`: matches the end of the string.\n\n- `*`: Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. \n- `+`: Causes the resulting RE to match 1 or more repetitions of the preceding RE, as many repetitions as are possible.\n- `?`: Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. \n- `*?`, `+?`, `??`: The `*`, `+`, and `?` qualifiers are all greedy; they match as much text as possible. Adding `?` after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched.\n- `{m}`: Specifies that exactly m copies of the previous RE should be matched.\n- `{m,n}`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as many repetitions as possible. \n- `{m,n}?`: Causes the resulting RE to match from `m` to `n` repetitions of the preceding RE, attempting to match as few repetitions as possible. \n- `[]`: Used to indicate a set of characters.\n- `()`: set groups.\n\n\n\n::: {.callout-note}\nTo search multiple characters simutanously, you may use `[]`. For example, `[abc]` means either `a` or `b` or `c`. However, `[]` doesn't recognize special characters, so `[\\s|\\w]` means either `\\` or `s` or `\\` or `w`, instead of the pattern `\\s` or `\\w`.\n\nTo search such a pattern, you may use `(|)`. For example, `(\\s|\\w)` means either `\\s` or `\\w` satisfies the pattern.\n:::\n\n::: {#exm-p1}\n\n```{python}\nimport re\ntext = \"foo bar\\t baz \\tqux\"\npattern = '\\s+'\nregex = re.compile(pattern)\nregex.split(text)\n```\n\n:::\n\n- `.match()`\n- `.search()`\n- `.findall()`\n- `.split()`\n- `.sub()`\n\nWe can use `()` to specify groups, and use `.groups()` to get access to the results.\n\n\n::: {#exm-p2}\n\n```{python}\nimport re\npattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})'\nregex = re.compile(pattern, flags=re.IGNORECASE)\nm = regex.match('wesm@bright.net')\nm.groups()\n```\n\n:::\n\nTo use regex to DataFrame and Series, you may directly apply `.match`, `.findall`, `.replace` after `.str`, with the regex pattern as one of the arguments.\n\n`.extract` is a method that is not from `re`. It is used to extract the matched groups and make them as a DataFrame. \n\n::: {#exm-p3}\n```{python}\nimport pandas as pd\nimport numpy as np\nmnames = ['movie_id', 'title', 'genres']\nmovies = pd.read_table('../assests/datasets/movies.dat', sep='::',\n                       header=None, names=mnames, engine=\"python\",\n                       encoding='ISO-8859-1')\n\npattern = r'([a-zA-Z0-9_\\s,.?:;\\']+)\\((\\d{4})\\)'\nmovies = movies.join(movies.title.str.extract(pattern).rename(columns={0: 'movie title', 1: 'year'}))\n```\n:::\n\n\n\n<!-- ```{python}\n#| eval: false\n#| echo: false\nfrom functools import reduce\ngenresdummylist = df['genres'].str.extractall(r\"'(\\w+)'\").unstack()\ndummylist = list()\nfor i in genresdummylist.columns:\n    dummylist.append(pd.get_dummies(genresdummylist[i]))\n\ndummy = reduce(lambda x, y: x.add(y, fill_value=0), dummylist).astype(int)\ndf = pd.merge(df, dummy, left_index=True, right_index=True)\n\n``` -->\n\n\n\n\n\n\n::: {#exr-pp5}\n# Regular expressions\nPlease use regular expressions to finish the following tasks.\n\n1. Match a string that has an `a` followed by zero or more `b`'s.\n2. Match a string that has an `a` followed by one or more `b`'s.\n3. Match a string that has an `a` followed by zero or one `b`.\n4. Match a string that has an `a` followed by three `b`'s.\n:::\n\n\n\n::: {#exr-m1}\n# More regex\nFind all words starting with `a` or `e` in a given string:\n\n```{python}\ntext = \"The following example creates an ArrayList with a capacity of 50 elements. Four elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\n```\n\n:::\n\n\n::: {#exr-m2}\n# More regex\nWrite a Python code to extract year, month and date from a `url1`: \n\n```{python}\nurl1= \"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"\n```\n\n:::\n\n\n\n\n::: {#exr-m3}\n# More regex\nPlease use regex to parse the following str to create a dictionary.\n```{python}\ntext = r'''\n{\n    name: Firstname Lastname;\n    age: 100;\n    salary: 10000 \n}\n'''\n```\n\n\n:::\n\n\n\n::: {#exr-pp1}\n\nConsider the following DataFrame.\n\n```{python}\ndata = [['Evert van Dijk', 'Carmine-pink, salmon-pink streaks, stripes, flecks.  Warm pink, clear carmine pink, rose pink shaded salmon.  Mild fragrance.  Large, very double, in small clusters, high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Every Good Gift', 'Red.  Flowers velvety red.  Moderate fragrance.  Average diameter 4\".  Medium-large, full (26-40 petals), borne mostly solitary bloom form.  Blooms in flushes throughout the season.'], \n        ['Evghenya', 'Orange-pink.  75 petals.  Large, very double bloom form.  Blooms in flushes throughout the season.'], \n        ['Evita', 'White or white blend.  None to mild fragrance.  35 petals.  Large, full (26-40 petals), high-centered bloom form.  Blooms in flushes throughout the season.'],\n        ['Evrathin', 'Light pink. [Deep pink.]  Outer petals white. Expand rarely.  Mild fragrance.  35 to 40 petals.  Average diameter 2.5\".  Medium, double (17-25 petals), full (26-40 petals), cluster-flowered, in small clusters bloom form.  Prolific, once-blooming spring or summer.  Glandular sepals, leafy sepals, long sepals buds.'],\n        ['Evita 2', 'White, blush shading.  Mild, wild rose fragrance.  20 to 25 petals.  Average diameter 1.25\".  Small, very double, cluster-flowered bloom form.  Blooms in flushes throughout the season.']]\n  \ndf = pd.DataFrame(data, columns = ['NAME', 'BLOOM']) \ndf \n```\n\nPlease use regex methods to find all the `()` in each columns.\n\n:::\n\n\n::: {#exr-pp2}\n\nFrom `ser = pd.Series(['Apple', 'Orange', 'Plan', 'Python', 'Money'])`, find the words that contain at least 2 vowels.\n:::\n\n\n\n::: {#exr-pp3}\n\nPlease download the [given file](assests/datasets/test_emails.txt) with sample emails, and use the following code to load the file and save it to a string `content`.\n```{python}\nwith open('../assests/datasets/test_emails.txt', 'r') as f:\n    content = f.read()\n```\nPlease use regex to play with `content`.\n\n1. Get all valid email address in `content`, from both the header part or the body part.\n2. There are two emails in `content`. Please get the sender's email and the receiver's email from `content`.\n3. Please get the sender's name.\n4. Please get the subject of each email.\n:::\n\n\n\n\n\n\n::: {#exr-pp4}\n\nExtract the valid emails from the series `emails`. The regex `pattern` for valid emails is provided as reference.\n\n```{python}\nimport pandas as pd\nemails = pd.Series(['buying books at amazom.com',\n                    'rameses@egypt.com',\n                    'matt@t.co',\n                    'narendra@modi.com'])\npattern = '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}'\n```\n\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":true,"top-level-division":"part","toc-depth":3,"highlight-style":"atom-one","output-file":"re.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.530","number-depth":4,"bibliography":["../../book.bib"],"csl":"../../ims.csl","crossref":{"labels":"arabic","subref-labels":"roman i"},"knitr":{"opts_chunk":{"comment":"#>","collapse":true}},"jupyter":"ds24","theme":"lumen","code-block-bg":true,"code-block-border-left":false,"page-layout":"article"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}